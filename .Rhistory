8 + 8
8 == 8
library(stargazer)
install.packages(stargazer)
setwd("C:/Users/mcleg/OneDrive/Desktop/Programming class")
# Load "Toyota4.csv" and save it as carsData.
# Load any packages that you may use for this assignment
carsData = read.csv("Toyota4.csv")
library(tidyverse)
library(stargazer)
install.packages("stargazer")
library(stargazer)
#Q1:
# Identify the variable(s) with missing values.
# Locate and replace those values with the mean of non-missing values.
is.na(carsData)
replace_na(mean(is.na(carsData)))
replace_na(mean(carsData,na.rm = TRUE)
View(carsData)
?replace_na
View(carsData)
sum(is.na(carsData))
replace_na(carsData, mean(is.na(carsData)))
Miss_data = which(is.na(carsData))
Miss_data
colSums(is.na(carsData))
replace_na(carsData, mean(carsData$Mileage, na.rm = TRUE))
carsData %>% replace_na(carsData$Mileage) %>% mean(carsData$Mileage, na.rm = TRUE)
carsData = carsData %>% mutate(Mileage = replace_na(Mileage, mean(Mileage, na.rm = TRUE)))
View(carsData)
replace_na(list(carsData$Mileage = mean(carsData$Mileage, na.rm = TRUE)))
carsData$Mileage[is.na(carsData$Mileage)] = mean(carsData$Mileage, na.rm = TRUE)
sum(is.na(carsData))
colSums(is.na(carsData))
#Q2:
# Summarize the fuel type variable using a frequency table and a plot.
# Return the name of the most common fuel type category.
Freq_table = table(carsData$Fuel_Type)
Freq_table
summary(Freq_table)
plot = plot(carsData$Fuel_Type)
plot = plot(carsData$Fuel_Type, carsData$Price, xlab = "Fuel Type", ylab = "Price")
plot(Freq_table)
#Q3:
# Create a boxplot that compares the distribution of price across different fuel types.
# Also, write a code that calculates the average price for each of these fuel type categories.
# Which fuel category has the highest average price?
# (write a code that returns both the name and the average price of this category)
PricebyFuel = boxplot(carsData$Price ~ carsData$Fuel_Type, xlab = "Fuel Type", ylab = "Price")
carsData %>% group_by(Fuel_Type) %>% summarize(Avg = mean(PricebyFuel))
carsData %>% group_by(Fuel_Type) %>% mean(Price)
aggregate(Price ~ Fuel_Type, data = carsData, FUN = mean)
AvgPrice = aggregate(Price ~ Fuel_Type, data = carsData, FUN = mean)
which.max(AvgPrice)
max(AvgPrice)
AvgPrice = data.frame(AvgPrice)
which.max(AvgPrice)
AvgPrice = is.numeric(AvgPrice)
which.max(AvgPrice)
#Q2:
# Summarize the fuel type variable using a frequency table and a plot.
# Return the name of the most common fuel type category.
Freq_table = table(carsData$Fuel_Type)
Freq_table
AvgPrice = is.numeric(AvgPrice)
AvgPrice
rm(AvgPrice)
AvgPrice = aggregate(Price ~ Fuel_Type, data = carsData, FUN = mean)
AvgPrice
names(which.max(AvgPrice))
str(AvgPrice)
which.max(AvgPrice[,2])
which.max(AvgPrice$Price)
names(which.max(AvgPrice$Price))
max.col(AvgPrice)
colnames(which.max(AvgPrice$Price))
colnames(AvgPrice, max(AvgPrice$Price))
rownames(AvgPrice, max(AvgPrice$Price)
names(which.max(AvgPrice))
rownames(which.max(AvgPrice))
AvgPrice %>% slice_max(Price)
#Q4:
# Create two scatterplots: Price (y-axis) vs. Age (x-axis), Price (y-axis) vs. Mileage (x-axis)
# In an attempt to know which variable (Age or Mileage) is more strongly correlated with price,
# report the correlation coefficient for both.
PriceVAge = plot(Age ~ Price, carsData)
PriceVMileage = plot(Mileage ~ Price, carsData)
lm(Age~Price, carsData)
cor(PriceVAge)
cor(PriceVMileage)
cor(Age ~ Price)
cor(carsData$Age,carsData$Price)
cor(carsData$Mileage, carsData$Price)
#Q5:
# Detect and remove outliers in terms of Price using the z-score method (z > 3 or z < -3).
# Write a code to return the number of outliers and save the cleaned data as carsUpdated.
# Note: While there are various methods for detecting outliers, use the z-score approach for this exercise.
boxplot(carsData$Price, outline = F)
boxplot(carsData$Price)
Summary(boxplot(carsData$Price))
Summary((carsData$Price))
summary(carsData$Price)
#Q5:
# Detect and remove outliers in terms of Price using the z-score method (z > 3 or z < -3).
# Write a code to return the number of outliers and save the cleaned data as carsUpdated.
# Note: While there are various methods for detecting outliers, use the z-score approach for this exercise.
boxplot(carsData$Price, outline = F)
#Q5:
# Detect and remove outliers in terms of Price using the z-score method (z > 3 or z < -3).
# Write a code to return the number of outliers and save the cleaned data as carsUpdated.
# Note: While there are various methods for detecting outliers, use the z-score approach for this exercise.
Price = boxplot(carsData$Price, outline = F)
#Q5:
# Detect and remove outliers in terms of Price using the z-score method (z > 3 or z < -3).
# Write a code to return the number of outliers and save the cleaned data as carsUpdated.
# Note: While there are various methods for detecting outliers, use the z-score approach for this exercise.
CarsUpdated = boxplot(carsData$Price, outline = F)
View(CarsUpdated)
#Q6:
# Run a simple linear regression of price using age as the predictor. (use the updated dataset)
# Save the results as regAge. Write a code that returns the summary of the results.
regAge = lm(Price ~ Age, carsData)
summary(regAge)
#Q7:
# Run a simple linear regression of price using mileage as the predictor. (use the updated dataset)
# Save the results as regMileage. Write a code that returns the summary of the results.
regAge = lm(Price ~ Mileage, carsData)
#Q7:
# Run a simple linear regression of price using mileage as the predictor. (use the updated dataset)
# Save the results as regMileage. Write a code that returns the summary of the results.
regMileage = lm(Price ~ Mileage, carsData)
#Q6:
# Run a simple linear regression of price using age as the predictor. (use the updated dataset)
# Save the results as regAge. Write a code that returns the summary of the results.
regAge = lm(Price ~ Age, carsData)
summary(regMileage)
#Q8:
# Run a multiple linear regression of price using both age and mileage as predictors. (use the updated dataset)
# Save the results as regBoth. Write a code that returns the summary of the results.
regBoth = lm(Price ~ Age + Mileage, carsData)
summary(regBoth)
